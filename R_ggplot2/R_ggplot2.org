#+TITLE: Correspondence between R+ggplot2 and gnuplot.
#+AUTHOR: Osada Yuma
#+options: num:4 ^:{}
#+LaTeX_header: \usepackage{minted}
* はじめに
** 文書
[[https://github.com/osada-yum/examples]] の ~R_ggplot2/~ ディレクトリにファイルがある.

Emacsのorg文書はリテラルプログラミングに対応しているので, .orgのファイルを使うことで, この文書のサンプルを実行できる.
** 実行環境
- Ubuntu 20.04
- org-9.5.2 on Emacs-28.0.50
* やりたいこと
- gnuplot並に簡単にプロットをしたい.
* gnuplotから引っ越す
- gnuplotは簡易的にデータを可視化するには取り回し易い.

  ~plot "filename"~ でプロットできる.
- データの加工は面倒.

  できなくはないんだろうけど.
** R+ggplot2の利点
- Rの機能が使える.
  - ファイルからデータを読み込んで加工してプロットするのが楽.
  - ~head(data)~ とかでデータの上をちょっと覗いたり,
    ~summary~ で統計を取ったりしやすい.
- プロットの設定を弄りやすい.

  テーマを変えたりプロットの枠を変えたりとか.
- 別のRパッケージでより便利になる.

  ~patchwork~ (プロットを並べられる)とか

  ~gganimate~ (.gif作れる)とか
- ラベルとかに日本語が使える.

  gnuplot では使えない?
** R+ggplot2の欠点
- ggplot2単体ではプロットをマウスで動かせない.

  ~plotly~ や  ~ggplotgui~ (ブラウザ上でプロットを設定できる)とかを使えば可能.
- 日本語の文書が少ない.

  とりあえず, `` =R ggplot2= '' とかで検索?
- ~gnuplot~ に比べると行数が増える.
* デモ
一部の画質が粗いのは, おそらくorg-babelで出力しているから.
src_R[:exports code]{ggsave()} 関数を使えば dpi を弄れるので問題なし.
** ファイルをプロットしたい
*** emacsのorg-babel用の設定
#+begin_src emacs-lisp :exports code :results output :cache no
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (gnuplot    . t)
     (R          . t)))
#+end_src

#+RESULTS[b34bc167a881e3c904b84b6e322f1dad1749a6be]:

*** ファイルの中身
~sin.dat~
#+name: sin.dat
#+begin_src bash :exports both :results output table :cache yes
  cat sin.dat
#+end_src

#+RESULTS[2c1796dd65f98fc72253afc6c067dccd8427e181]: sin.dat
|  1 |   0.3271947 |
|  2 |   0.6183698 |
|  3 |  0.84147096 |
|  4 |    0.971937 |
|  5 |  0.99540794 |
|  6 |   0.9092974 |
|  7 |   0.7230859 |
|  8 |  0.45727262 |
|  9 |     0.14112 |
| 10 | -0.19056797 |

~cos.dat~
#+name: cos.dat
#+begin_src bash :exports both :results output table :cache yes
  cat cos.dat
#+end_src

#+RESULTS[9cb9b59d489126c1563def989c4813ec0b0c70c1]: cos.dat
| 1 |  0.9950042 |
| 2 |  0.9800666 |
| 3 |  0.9553365 |
| 4 |   0.921061 |
| 5 | 0.87758255 |
| 6 |  0.8253356 |
| 7 |  0.7648422 |
| 8 |  0.6967067 |
| 9 |    0.62161 |

*** gnuplotなら
- 凄い簡単.
- データを可視化したいだけなら, これだけでOK.
#+name: gnuplot
#+begin_src gnuplot :sessoin gnuplot :exports both :results graphics file :file figure/sin_gnuplot.png :cache yes
  plot "sin.dat"
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[0e318a8d49777ba37d5a0fcc4c997a597ac14c4a]: gnuplot
[[file:figure/sin_gnuplot.png]]

*** R+ggplot2で愚直にプロット
- ~ggplot2~ をインストールする.
#+begin_src R :exports code
  install.packages("ggplot2")
#+end_src

- ~ggplot2~ のライブラリを読み込む.
#+begin_src R :session ggplot2 :exports code :output none :cache yes
  library(ggplot2)
#+end_src

#+RESULTS[e58f93fa9c50bd7b57f818e036e81049aedf6e57]:
| ggplot2   |
| stats     |
| graphics  |
| grDevices |
| utils     |
| datasets  |
| methods   |
| base      |

- ~read.table~ 関数でファイルを読み込む.
- `` ~.~ '' は名前の一部であり, メソッドアクセス演算子ではない.
- 列の名前はV1, V2, ...となっている.
  ~colnames~ 関数で変更することも可能.
#+name: ggplot2
#+begin_src R :session ggplot2 :exports both :results output table :cache yes
  d_sin <- read.table("sin.dat", header = F)
  head(d_sin, n = 2)
#+end_src

#+RESULTS[b80e1240a691fdacd69dc22948b02f0d49865bba]: ggplot2
| V1 |        V2 |
|----+-----------|
|  1 | 0.3271947 |
|  2 | 0.6183698 |
|----+-----------|

- ~ggplot()~ と部品(~geom_point~ とか)を ~+~ で組み合わせてプロットする.
- 以下も可能.
  - src_R[:exports code]{ggplot(data = d_sin) + geom_point(aes(x = V1, y = V2))}

    src_R[:exports code]{geom_point(aes(x = V1, y = V3))}を追加すれば別の列もプロットできる.
  - src_R[:exports code]{ggplot(data = d_sin, aes(x = V1, y = V2)) + geom_point()}

    src_R[:exports code]{geom_line()}で点と線を一緒にプロットできる.
  - src_R[:exports code]{ggplot() + geom_point(data = d_sin, aes(x = V1, y = V2))}

    src_R[:exports code]{geom_point(data = another, aes(x = V5, y = V1))}で別の ~data.frame~ のデータも一緒にプロットできる
#+name: ggplot2-plot
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2.png :cache yes
  plt <- ggplot(data = d_sin) + geom_point(aes(x = V1, y = V2))
  plt
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[5a31e38c04f4c901579f9cb5d169d29e04d2c0f5]: ggplot2-plot
[[file:figure/sin_ggplot2.png]]

*** gnuplotに似せる
**** themeの設定
#+name: ggplot2-theme
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_theme.png :cache yes
  plt_theme <- plt + theme_bw()
  plt_theme
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[4c79746ce3d7b94f7a873dfb15385b853d7a56fb]: ggplot2-theme
[[file:figure/sin_ggplot2_theme.png]]

**** breakの設定

(~gnuplot~ でいうticks.)
#+name: ggplot2-breaks
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_breaks.png :cache yes
    plt_breaks <- plt_theme +
      scale_x_continuous(breaks = seq(from = 1.0, to = 10.0, by = 1.0)) +
      scale_y_continuous(breaks = seq(from = -0.2, to = 1.0, by = 0.2))
    plt_breaks
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[c15d67689395354fe2e51d26fb12c05dde09cf54]: ggplot2-breaks
[[file:figure/sin_ggplot2_breaks.png]]

**** labelの設定
#+name: ggplot2-label
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_label.png :cache yes
  plt_label <- plt_breaks + xlab("x") + ylab("y")
  plt_label
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[93d03ed3a644e89de73ce63cf41fc13169d43539]: ggplot2-label
[[file:figure/sin_ggplot2_label.png]]

**** aesの中でshapeとかcolorを指定するとlegendが出る

- ~%+%~ で既存の要素を置き換えられるらしい.


#+name: ggplot2-legend
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_legend.png :cache yes
  plt_legend <- plt_label %+%
    aes(shape = "サイン", color = "サイン")
  plt_legend
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[b4e2f4dc8d2623995d26532d2387c00122ba72e2]: ggplot2-legend
[[file:figure/sin_ggplot2_legend.png]]

**** shapeとcolorを変える
#+name: ggplot2-legend2
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_legend2.png :cache yes
  plt_legend2 <- plt_legend +
    scale_shape_manual("functions", values = c(3)) +
    scale_color_manual("functions", values = c("#990066"))
  plt_legend2
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[79c825c379215512ec1cae4b6340482a9af56457]: ggplot2-legend2
[[file:figure/sin_ggplot2_legend2.png]]

**** legendの位置を変更

legendの左下(0.0, 0.0)を図の(0.1, 0.1)へ持っていく.
#+name: ggplot2-legend-position
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_legend_position.png :cache yes
     plt_legend_position <- plt_legend2 +
       theme(legend.justification = c(0.0, 0.0)
           , legend.position      = c(0.1, 0.1))
     plt_legend_position
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[570397f20a60a3ee9081306c7f69bdf583bda7f7]: ggplot2-legend-position
[[file:figure/sin_ggplot2_legend_position.png]]

**** legendに囲みを変更
#+name: ggplot2-legend-box
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_legend_box.png :cache yes
  plt_legend_box <- plt_legend_position +
    theme(legend.background     = element_blank()
        , legend.box.background = element_rect(color = "black"))
  plt_legend_box
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[56855d17759f11b5c152e35fe32fa1255f0547d6]: ggplot2-legend-box
[[file:figure/sin_ggplot2_legend_box.png]]

**** 文字を大きく, 色を黒に
#+name: ggplot2-text-property
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_text_prop.png :cache yes
  plt_text_prop <- plt_legend_box +
    theme(legend.text  = element_text(size = 20)
        , legend.title = element_text(size = 20)
        , axis.text  = element_text(size = 20, color = "black")
        , axis.title = element_text(size = 24))
  plt_text_prop
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[b84fef7814c0a2f2cddb3fc478cc42f006bdd989]: ggplot2-text-property
[[file:figure/sin_ggplot2_text_prop.png]]

**** legendのタイトルとグリッドを消去する
#+name: ggplot2-grid
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_grid.png :cache yes
  plt_grid <- plt_text_prop +
    theme(legend.title = element_blank()
        , panel.grid = element_blank())
  plt_grid
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[bd14fb75f22014658c16220eefb025c9bef08fed]: ggplot2-grid
[[file:figure/sin_ggplot2_grid.png]]

**** ticksを内側に変更する.

ticksのテキストのマージンも変更する.
#+name: ggplot2-ticks
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_ticks.png :cache yes
    plt_ticks <- plt_grid +
      theme(axis.text.x  = element_text(margin = margin(t = 0.5, unit = "cm"))
          , axis.text.y  = element_text(margin = margin(r = 0.5, unit = "cm"))
          , axis.ticks.length=unit(-0.25, "cm"))
    plt_ticks
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[018169908f47c0eeff28b5f55ad16c77500ff273]: ggplot2-ticks
[[file:figure/sin_ggplot2_ticks.png]]

**** アスペクト比を変更する
#+name: ggplot2-aspectratio
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_aspectratio.png :cache yes
  plt_aspect <- plt_ticks +
    theme(aspect.ratio = 3/4)
  plt_aspect
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[cec05b23757e21b5d9bee462a229c24436a1b217]: ggplot2-aspectratio
[[file:figure/sin_ggplot2_aspectratio.png]]

**** 比較

- 結構似ている.
- ここまでする必要はないが, 色々自由に設定できる.

#+ATTR_LaTeX: :width 0.45\textwidth :center nil
[[file:figure/sin_gnuplot.png]]
#+ATTR_LaTeX: :width 0.45\textwidth :center nil
[[file:figure/sin_ggplot2_aspectratio.png]]
** ファイルに書き込む
*** gnuplotなら
#+begin_src gnuplot :session gnuplot-png :exports code :cache yes
  set size square
  set terminal png
  set output 'sin_gnuplot_output.png'
  plot "sin.dat" using 1:2 with points
#+end_src
#+RESULTS[f6ed6f89ca49cdadc7b01f6b4196c8fca96d7736]:

#+ATTR_LaTeX: :width 0.8\textwidth :center t
[[file:sin_gnuplot_output.png]]
*** R+ggplot2
#+name: ggplot2-ggsave
#+begin_src R :session ggplot2 :exports code :cache yes
  plt <- ggplot(data = d_sin) + geom_point(aes(x = V1, y = V2))
  ggsave(filename = "sin_ggplot2_output.png"
       , plot = plt
       , width = 7, height = 7)
#+end_src

#+RESULTS[f2ef8474bb18fc14467f2d335a509916e4aa4941]: ggplot2-ggsave
: sin_ggplot2_output.png

#+ATTR_LaTeX: :width 0.8\textwidth :center t
[[file:sin_ggplot2_output.png]]
** 範囲を指定
*** gnuplotなら
#+name: gnuplot-range
#+begin_src gnuplot :session gnuplot-settings :exports both :results graphics file :file figure/sin_gnuplot_range.png :cache yes
  set size square
  set xrange [0:11]
  set yrange [-1.1:1.1]
  set xtics 2
  set ytics 0.2
  set xlabel "x"
  set ylabel "y"
  set key left bottom
  plot "sin.dat" using 1:2 with linespoints title "sin"
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[1aa0811736a805e7f8f74aaa1e2e18a0bba21772]: gnuplot-range
[[file:figure/sin_gnuplot_range.png]]

*** R+ggplot2
- 行末に ~+~ を置くと行を跨げる.
- ~geom_point~ と ~geom_line~ を同時に使える.
- ~scale_x_continuous~ と ~scale_y_continuous~ の引数 ~breaks~ と ~limits~ にベクトル src_R[:exports code]{c(...)} を渡す.

  - ~limits~ に渡すのは2要素のベクトル.
- ~scale_shape_manual~ と ~scale_color_manual~ の引数 ~values~ にベクトルを渡す.

  - gnuplotのlinetypeやlinecolorみたいなもの.
  - shapeやcolorの数文の長さのベクトルが必要.
#+name: ggplot2-range
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sin_ggplot2_range.png :cache yes
  plt_range <- ggplot(data = d_sin, aes(x = V1, y = V2, shape = "sin", color = "sin")) +
    geom_point() + geom_line() +
    scale_x_continuous(breaks = seq(from = 0.0 , to = 10.0, by = 2.0)
                     , limits = c(0, 11)) +
    scale_y_continuous(breaks = seq(from = -1.0, to = 1.0 , by = 0.2)
                     , limits = c(-1.0, 1.0)) +
    scale_shape_manual("functions", values = c(3)) +
    scale_color_manual("functions", values = c("#990066")) +
    xlab("x") + ylab("y") +
    theme_bw() +
    theme(axis.text  = element_text(size = 20, color = "black")
        , axis.title = element_text(size = 20)
        , legend.text  = element_text(size = 20)
        , legend.title = element_blank()
        , legend.justification = c(0.0, 0.0)
        , legend.position      = c(0.05, 0.05)
        , panel.grid = element_blank()
        , axis.ticks.length = unit(-0.25, "cm")
        , axis.text.x       = element_text(margin = margin(t = 0.5, unit = "cm"))
        , axis.text.y       = element_text(margin = margin(r = 0.5, unit = "cm")))
  plt_range
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[cb90824dd0c638dcd899302ec4a695ecc03052cc]: ggplot2-range
[[file:figure/sin_ggplot2_range.png]]

** 複数ファイルをプロット
*** gnuplot
#+name: gnuplot-multifile
#+begin_src gnuplot :session gnuplot-multifile :exports both :results graphics file :file figure/sincos_gnuplot_multifile.png :cache yes
    set size square
    set xrange [0:11]
    set yrange [-1.1:1.1]
    set xtics    1,    2, 11
    set ytics -1.0, 0.25, 1.0
    set xlabel "x"
    set ylabel "y"
    set key left bottom
    plot "sin.dat" using 1:2 with linespoints title "sin",\
         "cos.dat" using 1:2 with linespoints title "cos"
#+end_src

#+RESULTS[bb3c0b9cf87d2ad39d7ea3dd7915deaa22ea6d9c]: gnuplot-multifile
[[file:figure/sincos_gnuplot_multifile.png]]

*** R+ggplot2
**** 愚直に

- themeを使いまわすために, ~mytheme~ 変数に代入しておくことができる.

  xとyのscaleも使いまわす.
#+name: ggplot2-multifile
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sincos_ggplot2_multifile.png :cache yes
  d_cos <- read.table("cos.dat", header = F)

  mytheme <-
    theme(axis.text  = element_text(size = 20, color = "black")
        , axis.title = element_text(size = 20)
        , legend.text  = element_text(size = 20)
        , legend.title = element_blank()
        , legend.justification = c(0.0, 0.0)
        , legend.position      = c(0.05, 0.05)
        , panel.grid = element_blank()
        , axis.ticks.length = unit(-0.25, "cm")
        , axis.text.x       = element_text(margin = margin(t = 0.5, unit = "cm"))
        , axis.text.y       = element_text(margin = margin(r = 0.5, unit = "cm")))

  my_x_scales <-
    scale_x_continuous(breaks = seq(from = 1.0 , to = 11.0, by = 2.0)
                     , limits = c(0, 11))
  my_y_scales <-
    scale_y_continuous(breaks = seq(from = -1.0, to = 1.0 , by = 0.25)
                     , limits = c(-1.0, 1.0))

  plt_multifile <- ggplot() +
    geom_point(data = d_sin, aes(x = V1, y = V2, shape = "sin", color = "sin")) +
    geom_line(data = d_sin, aes(x = V1, y = V2, shape = "sin", color = "sin")) +
    geom_point(data = d_cos, aes(x = V1, y = V2, shape = "cos", color = "cos")) +
    geom_line(data = d_cos, aes(x = V1, y = V2, shape = "cos", color = "cos")) +
    my_x_scales + my_y_scales +
    scale_shape_manual("functions", values = c(3:4)) +
    scale_color_manual("functions", values = c("#990066", "#009900")) +
    xlab("x") + ylab("y") +
    theme_bw() + mytheme
  plt_multifile
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[2a486743fe190822ad72539ec692de467cfb8809]: ggplot2-multifile
[[file:figure/sincos_ggplot2_multifile.png]]

**** data.frameの構造を変えてプロット

- ~data.frame~ に新しい列に関数の種類を文字列で代入する.
- ~rbind~ で2つを合体させる.
#+name: ggplot2-sincos
#+begin_src R :session ggplot2 :exports both :results output table :cache yes
  d_sin2 <- d_sin
  d_cos2 <- d_cos
  d_sin2$func <- "sin"
  d_cos2$func <- "cos"
  d_sincos <- rbind(d_sin2, d_cos2)
  d_sincos
#+end_src

#+RESULTS[cc19431446f83afaa12c212549fa27e959ca354b]: ggplot2-sincos
| V1 |         V2 | func |
|----+------------+------|
|  1 |  0.3271947 | sin  |
|  2 |  0.6183698 | sin  |
|  3 |  0.8414710 | sin  |
|  4 |  0.9719370 | sin  |
|  5 |  0.9954079 | sin  |
|  6 |  0.9092974 | sin  |
|  7 |  0.7230859 | sin  |
|  8 |  0.4572726 | sin  |
|  9 |  0.1411200 | sin  |
| 10 | -0.1905680 | sin  |
|  1 |  0.9950042 | cos  |
|  2 |  0.9800666 | cos  |
|  3 |  0.9553365 | cos  |
|  4 |  0.9210610 | cos  |
|  5 |  0.8775825 | cos  |
|  6 |  0.8253356 | cos  |
|  7 |  0.7648422 | cos  |
|  8 |  0.6967067 | cos  |
|  9 |  0.6216100 | cos  |
|----+------------+------|

- ~shape~ と ~color~ に ~func~ を指定する.

  src_R[:exports code]{"sin"} と src_R[:exports code]{"cos"} で分別する.
#+name: ggplot2-onedataframe
#+begin_src R :session ggplot2 :exports both :results graphics file :file figure/sincos_ggplot2_onedataframe.png :cache yes
  plt_onedataframe <- ggplot(data = d_sincos
                           , aes(x = V1, y = V2, shape = func, color = func)) +
    geom_point() + geom_line() +
    my_x_scales + my_y_scales +
    scale_shape_manual("functions", values = c(3:4)) +
    scale_color_manual("functions", values = c("#990066", "#009900")) +
    xlab("x") + ylab("y") +
    theme_bw() + mytheme
  plt_onedataframe
#+end_src

#+ATTR_LaTeX: :width 0.8\textwidth :center t
#+RESULTS[94af2c22619fc8c3a69bc522e7d7a09cdb772a44]: ggplot2-onedataframe
[[file:figure/sincos_ggplot2_onedataframe.png]]

* まとめ
- 基本的には src_R[:exports code]{ggplot(data = mydata)} に色々足していけばよい.

  src_R[:exports code]{geom_point} や src_R[:exports code]{geom_line} とか.
- src_R[:exports code]{aes(x = myx, y = myy)} でデータフレームのどの列を使うかを指定する.

  shape とか color とかも指定できる.
* もっと
** 参考URL
- ggplot2のマニュアル

  [[https://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf]]

- Matplotlib VS Ggplot2

  matplotlib と ggplot2 との比較.

  [[https://towardsdatascience.com/matplotlib-vs-ggplot2-c86dd35a9378]]
** プロットをマウスとかで弄るには
gnuplotではプロットをマウスでぐりぐりできるが, ggplot2ではplotlyみたいなライブラリが必要.

[[https://plotly.com/r/]]

ggplotguiみたいなライブラリを使えばブラウザ上でグリグリしたり, プロットの設定を弄ったりできる.

[[https://cran.r-project.org/web/packages/ggplotgui/README.html]]

他にも色々あるらしい.

[[https://note.com/tqwst408/n/n82d56c69a18e]]
** プロットを横とか縦に並べるには
patchworkライブラリを使うとよい.

[[https://cran.r-project.org/web/packages/patchwork/patchwork.pdf]]

[[https://qiita.com/nozma/items/4512623bea296ccb74ba]]
** GIFアニメを作る.
gganimateライブラリを使うとよい.

[[https://gganimate.com/]]
